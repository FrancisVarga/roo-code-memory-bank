name: Release

on:
  push:
    branches:
      - main # Adjust this to your default branch if different
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write
  issues: write # Added permission for label creation

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node # Choose the appropriate type for your project
          package-name: roo-code-memory-bank
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"docs","section":"Documentation","hidden":false},{"type":"chore","section":"Miscellaneous","hidden":false}]'

  build-package:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for updating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-please.outputs.tag_name }} # Checkout the tag that was just released

      - name: Create Release Package
        run: |
          # Create staging directory
          mkdir -p staging

          # Copy all required files to staging directory
          mkdir -p staging/config/specs
          cp -r config/.clinerules-* staging/config/ || true
          cp -r config/.roomodes staging/config/ || true
          cp -r config/specs/ staging/config/ || true
          cp README.md staging/ || true
          cp LICENSE staging/ || true

          # Create releases directory
          mkdir -p release

          # Create archives from staging directory
          cd staging
          zip -r ../release/roo-code-memory-bank.zip .
          tar -czf ../release/roo-code-memory-bank.tar.gz .
          cd ..

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            release/roo-code-memory-bank.zip
            release/roo-code-memory-bank.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-latest-release:
    needs: [release-please, build-package]
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Download release assets
        run: |
          mkdir -p assets
          # Download the release assets from the newly created release
          gh release download ${{ needs.release-please.outputs.tag_name }} --dir assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update "latest" release
        run: |
          # Check if "latest" release exists and delete it if it does
          gh release delete latest --yes || true

          # Create new "latest" release pointing to the current tag
          gh release create latest \
            --title "Latest Release" \
            --notes "This is always the latest release of roo-code-memory-bank. Currently points to ${{ needs.release-please.outputs.tag_name }}." \
            --target ${{ github.sha }}

          # Upload the same assets to the "latest" release
          for file in assets/*; do
            gh release upload latest "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
